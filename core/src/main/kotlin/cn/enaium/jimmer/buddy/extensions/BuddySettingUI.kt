/*
 * Copyright 2025 Enaium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cn.enaium.jimmer.buddy.extensions

import cn.enaium.jimmer.buddy.JimmerBuddy
import cn.enaium.jimmer.buddy.storage.JimmerBuddySetting
import cn.enaium.jimmer.buddy.utility.I18n
import com.intellij.openapi.components.BaseState
import com.intellij.openapi.observable.properties.PropertyGraph
import com.intellij.openapi.options.Configurable
import com.intellij.ui.dsl.builder.bindSelected
import com.intellij.ui.dsl.builder.bindText
import com.intellij.ui.dsl.builder.panel
import javax.swing.JComponent

/**
 * @author Enaium
 */
class BuddySettingUI : Configurable {
    override fun getDisplayName(): String {
        return JimmerBuddy.NAME
    }

    val model = Model().also {
        it.icon = JimmerBuddySetting.INSTANCE.state.icon
        it.generateWhenStartup = JimmerBuddySetting.INSTANCE.state.generateWhenStartup
        it.autoGenerate = JimmerBuddySetting.INSTANCE.state.autoGenerate
        it.autoGenerateDelay = JimmerBuddySetting.INSTANCE.state.autoGenerateDelay
    }

    override fun createComponent(): JComponent {
        return panel {
            row {
                checkBox(I18n.message("setting.icon")).bindSelected(model.iconProperty)
                checkBox(I18n.message("setting.generateWhenStartup")).bindSelected(model.generateWhenStartupProperty)
            }
            row {
                checkBox(I18n.message("setting.autoGenerate")).bindSelected(model.autoGenerateProperty)
                textField().bindText(model.autoGenerateDelayProperty).label(I18n.message("setting.autoGenerateDelay"))
            }
        }
    }

    override fun isModified(): Boolean {
        return model.icon != JimmerBuddySetting.INSTANCE.state.icon
                || model.generateWhenStartup != JimmerBuddySetting.INSTANCE.state.generateWhenStartup
                || model.autoGenerate != JimmerBuddySetting.INSTANCE.state.autoGenerate
                || model.autoGenerateDelay != JimmerBuddySetting.INSTANCE.state.autoGenerateDelay
    }

    override fun apply() {
        JimmerBuddySetting.INSTANCE.state.icon = model.icon
        JimmerBuddySetting.INSTANCE.state.generateWhenStartup = model.generateWhenStartup
        JimmerBuddySetting.INSTANCE.state.autoGenerate = model.autoGenerate
        JimmerBuddySetting.INSTANCE.state.autoGenerateDelay = model.autoGenerateDelay
    }

    class Model : BaseState() {
        private val graph: PropertyGraph = PropertyGraph()
        val iconProperty = graph.property(true)
        val generateWhenStartupProperty = graph.property(true)
        val autoGenerateProperty = graph.property(true)
        val autoGenerateDelayProperty = graph.property("2000")
        var icon by iconProperty
        var generateWhenStartup by generateWhenStartupProperty
        var autoGenerate by autoGenerateProperty
        var autoGenerateDelay
            get() = autoGenerateDelayProperty.get().toLong()
            set(value) {
                autoGenerateDelayProperty.set(value.toString())
            }
    }
}