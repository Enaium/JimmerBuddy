import{_ as a,c as t,o,af as n}from"./chunks/framework.CPLsEXPO.js";const u=JSON.parse('{"title":"Inspection","description":"","frontmatter":{},"headers":[],"relativePath":"reference/feature-inspection.md","filePath":"en/reference/feature-inspection.md"}'),i={name:"reference/feature-inspection.md"};function r(c,e,s,d,l,p){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="inspection" tabindex="-1">Inspection <a class="header-anchor" href="#inspection" aria-label="Permalink to “Inspection”">​</a></h1><p>JimmerBuddy provides several inspection features to help you identify problems in your code.</p><h2 id="association-annotations" tabindex="-1">Association Annotations <a class="header-anchor" href="#association-annotations" aria-label="Permalink to “Association Annotations”">​</a></h2><p>Checks for correct usage of association annotations:</p><ul><li><code>@OneToOne</code> and <code>@ManyToOne</code> cannot be used on collection properties.</li><li><code>@OneToMany</code> and <code>@ManyToMany</code> cannot be used on non-collection properties.</li></ul><h2 id="mappedby-property" tabindex="-1">MappedBy Property <a class="header-anchor" href="#mappedby-property" aria-label="Permalink to “MappedBy Property”">​</a></h2><p>Checks the <code>mappedBy</code> property of associations:</p><ul><li>The <code>mappedBy</code> property must exist.</li><li>The <code>mappedBy</code> property type must match the inverse property type.</li></ul><h2 id="idview-annotation" tabindex="-1">IdView Annotation <a class="header-anchor" href="#idview-annotation" aria-label="Permalink to “IdView Annotation”">​</a></h2><p>Checks the <code>@IdView</code> annotation:</p><ul><li>The <code>value</code> must exist if the property is a collection.</li><li>The property type must be a collection if the type is generic.</li><li>The base property must exist.</li></ul><h2 id="formula-annotation" tabindex="-1">Formula Annotation <a class="header-anchor" href="#formula-annotation" aria-label="Permalink to “Formula Annotation”">​</a></h2><p>Checks the <code>@Formula</code> annotation:</p><ul><li>The <code>dependencies</code> property must exist.</li></ul><h2 id="fetchby-annotation" tabindex="-1">FetchBy Annotation <a class="header-anchor" href="#fetchby-annotation" aria-label="Permalink to “FetchBy Annotation”">​</a></h2><p>Checks the <code>@FetchBy</code> annotation:</p><ul><li>The property must be a fetcher.</li><li>The property must exist.</li><li>The fetcher type must match the fetch type.</li></ul><h2 id="immutable-annotations" tabindex="-1">Immutable Annotations <a class="header-anchor" href="#immutable-annotations" aria-label="Permalink to “Immutable Annotations”">​</a></h2><p>Checks for correct usage of immutable-related annotations such as <code>@Immutable</code>, <code>@Entity</code>, <code>@MappedSuperclass</code>, and <code>@Embeddable</code>:</p><ul><li>Must be used on interfaces.</li></ul><h2 id="orderedprop-annotation" tabindex="-1">OrderedProp Annotation <a class="header-anchor" href="#orderedprop-annotation" aria-label="Permalink to “OrderedProp Annotation”">​</a></h2><p>Checks the <code>@OrderedProp</code> annotation:</p><ul><li>The <code>value</code> property must exist.</li></ul><h2 id="database-checks" tabindex="-1">Database Checks <a class="header-anchor" href="#database-checks" aria-label="Permalink to “Database Checks”">​</a></h2><p>Ensure that the table is cached in the database list first.</p><p>Checks the <code>@Table</code> annotation:</p><ul><li>The <code>name</code> property must exist in the database.</li><li>The class name must exist in the database.</li></ul><p>Checks the <code>@Column</code> annotation:</p><ul><li>The <code>name</code> property must exist in the database.</li><li>The property name must exist in the database.</li></ul>',29)]))}const m=a(i,[["render",r]]);export{u as __pageData,m as default};
