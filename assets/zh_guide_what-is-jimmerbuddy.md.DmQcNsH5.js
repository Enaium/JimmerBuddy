import{_ as o,c as i,o as d,af as c}from"./chunks/framework.CPLsEXPO.js";const u=JSON.parse('{"title":"JimmerBuddy是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/what-is-jimmerbuddy.md","filePath":"zh/guide/what-is-jimmerbuddy.md"}'),a={name:"zh/guide/what-is-jimmerbuddy.md"};function l(t,e,r,m,n,s){return d(),i("div",null,e[0]||(e[0]=[c('<h1 id="jimmerbuddy是什么" tabindex="-1">JimmerBuddy是什么？ <a class="header-anchor" href="#jimmerbuddy是什么" aria-label="Permalink to “JimmerBuddy是什么？”">​</a></h1><p>JimmerBuddy 是 Jimmer 项目的 IntelliJ 插件。以往需要手动清理并构建项目才能生成代码，现在只需修改源代码即可自动生成相关代码。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>只想快速体验？跳转到<a href="./quickstart.html">快速开始</a></p></div><h2 id="一流的-java-kotlin-开发体验" tabindex="-1">一流的 Java/Kotlin 开发体验 <a class="header-anchor" href="#一流的-java-kotlin-开发体验" aria-label="Permalink to “一流的 Java/Kotlin 开发体验”">​</a></h2><ul><li>自动从源代码生成如 <code>draft</code>、<code>fetcher</code>、<code>props</code> 等代码。</li><li>列出项目中的所有 <code>Immutables</code>、<code>DTOs</code> 和 <code>ErrorFamilies</code>。</li><li>支持从数据库或 DDL 文件生成实体。</li><li>Jimmer 项目向导。</li><li>Jimmer 注解的代码检查。</li><li>导航到 <code>Immutable</code> 或 <code>Prop</code>。</li><li>Jimmer 注解的代码补全。</li><li>一键生成所有 <code>Draft</code>。</li><li>DTO 类成员跳转到 DTO 文件。</li><li>SQL 结果复制到剪贴板。</li><li>DTO 类型计数与导航。</li><li>Immutable 继承者计数与导航。</li></ul><h2 id="一流的-dto-开发体验" tabindex="-1">一流的 DTO 开发体验 <a class="header-anchor" href="#一流的-dto-开发体验" aria-label="Permalink to “一流的 DTO 开发体验”">​</a></h2><ul><li>自动为 DTO 生成 <code>view</code>、<code>input</code>、<code>specification</code> 等类。</li><li>语法高亮。</li><li>语法检查。</li><li>原生编译器检查。</li><li>导航到 <code>type</code>、<code>prop</code>、<code>import</code>、<code>annotation</code> 等。</li><li><code>export</code>、<code>package</code>、<code>import</code>、<code>prop</code>、<code>macro</code>、<code>config</code> 等的代码补全。</li><li>自动导入 <code>export</code>、<code>implements</code>、<code>userProp</code> 等。</li><li>源码格式化。</li><li>结构视图。</li><li>可视化创建 DTO 文件。</li></ul><h2 id="支持的注解" tabindex="-1">支持的注解 <a class="header-anchor" href="#支持的注解" aria-label="Permalink to “支持的注解”">​</a></h2><p><code>@Entity</code>、<code>@OneToOne</code>、<code>@OneToMany</code>、<code>@ManyToMany</code>、<code>@IdView</code>、<code>@Formula</code></p>',9)]))}const h=o(a,[["render",l]]);export{u as __pageData,h as default};
