import{_ as i,c as o,o as d,af as a}from"./chunks/framework.CPLsEXPO.js";const u=JSON.parse('{"title":"JimmerBuddy是什么?","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/what-is-jimmerbuddy.md","filePath":"zh/guide/what-is-jimmerbuddy.md"}'),l={name:"zh/guide/what-is-jimmerbuddy.md"};function c(t,e,r,m,n,s){return d(),o("div",null,e[0]||(e[0]=[a('<h1 id="jimmerbuddy是什么" tabindex="-1">JimmerBuddy是什么? <a class="header-anchor" href="#jimmerbuddy是什么" aria-label="Permalink to “JimmerBuddy是什么?”">​</a></h1><p>JimmerBuddy 是 jimmer 项目的 IntelliJ 插件。之前，您需要手动清理并构建项目才能生成代码。现在，您只需更改源代码即可生成任何代码。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>只是想尝试一下？跳到<a href="./quickstart.html">快速开始</a></p></div><h2 id="一流的-java-kotlin-开发" tabindex="-1">一流的 Java/Kotlin 开发 <a class="header-anchor" href="#一流的-java-kotlin-开发" aria-label="Permalink to “一流的 Java/Kotlin 开发”">​</a></h2><ul><li>从您的源代码自动生成代码。例如：<code>draft</code>, <code>fetcher</code>, <code>props</code> 等。</li><li>列出项目中的所有 <code>Immutables</code>, <code>DTOs</code>, 和 <code>ErrorFamilies</code>。</li><li>从数据库或 ddl 文件生成实体。</li><li>Jimmer 项目向导。</li><li>jimmer 注解的检查。</li><li>导航到 Immutable 或 Prop。</li><li>jimmer 注解的检查。</li><li>生成所有 Draft 的设置。</li><li>DTO 类成员转到 DTO 文件。</li><li>SQL 到剪贴板。</li><li>DTO 类型计数和导航。</li><li>Immutable 继承者计数和导航。</li></ul><h2 id="一流的-dto-开发" tabindex="-1">一流的 DTO 开发 <a class="header-anchor" href="#一流的-dto-开发" aria-label="Permalink to “一流的 DTO 开发”">​</a></h2><ul><li>自动生成 DTO 的 <code>view</code>, <code>input</code>, <code>specification</code> 等类。</li><li>语法高亮。</li><li>语法检查。</li><li>原生编译器检查。</li><li>导航到 <code>type</code>, <code>prop</code>, <code>import</code>, <code>annotation</code>, 等。</li><li>完成 <code>export</code>, <code>package</code>, <code>import</code>, <code>prop</code>, <code>macro</code>, <code>config</code> 等。</li><li>自动导入 <code>export</code>, <code>implements</code>, <code>userProp</code> 等。</li><li>格式化源代码。</li><li>结构视图。</li><li>可视化创建 DTO 文件。</li></ul><h2 id="支持的注解" tabindex="-1">支持的注解 <a class="header-anchor" href="#支持的注解" aria-label="Permalink to “支持的注解”">​</a></h2><p><code>@Entity</code>, <code>@OneToOne</code>, <code>@OneToMany</code>, <code>@ManyToMany</code>, <code>@IdView</code>, <code>@Formula</code></p>',9)]))}const h=i(l,[["render",c]]);export{u as __pageData,h as default};
