import{_ as a,c as t,o as l,af as i}from"./chunks/framework.CPLsEXPO.js";const p=JSON.parse('{"title":"Quickstart","description":"","frontmatter":{},"headers":[],"relativePath":"guide/quickstart.md","filePath":"en/guide/quickstart.md"}'),n={name:"guide/quickstart.md"};function r(o,e,s,h,d,c){return l(),t("div",null,e[0]||(e[0]=[i('<h1 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-label="Permalink to “Quickstart”">​</a></h1><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to “Install”">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to “Prerequisites”">​</a></h3><ul><li>Intellij <code>2023.1</code> or later.</li></ul><h3 id="install-in-intellij" tabindex="-1">Install in Intellij <a class="header-anchor" href="#install-in-intellij" aria-label="Permalink to “Install in Intellij”">​</a></h3><ol><li>Open IntelliJ IDEA.</li><li>Go to <code>File</code> &gt; <code>Settings</code> &gt; <code>Plugins</code>.</li><li>Click <code>Marketplace</code>.</li><li>Search for <code>JimmerBuddy</code> and install it.</li></ol><h3 id="install-online" tabindex="-1">Install online <a class="header-anchor" href="#install-online" aria-label="Permalink to “Install online”">​</a></h3><ol><li>Open <a href="https://plugins.jetbrains.com/plugin/26622-jimmer-buddy" target="_blank" rel="noreferrer">the link</a></li><li>Click <code>Get</code> button.</li></ol><h3 id="install-offline" tabindex="-1">Install offline <a class="header-anchor" href="#install-offline" aria-label="Permalink to “Install offline”">​</a></h3><ol><li>Open <a href="https://plugins.jetbrains.com/plugin/26622-jimmer-buddy" target="_blank" rel="noreferrer">the link</a></li><li>Click <code>versions</code> button.</li><li>Download the latest version.</li><li>Install the plugin from <code>File</code> &gt; <code>Settings</code> &gt; <code>Plugins</code> &gt; <code>Install plugin from disk...</code>.</li></ol><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to “FAQ”">​</a></h2><h3 id="why-is-the-plugin-not-available" tabindex="-1">Why is the plugin not available? <a class="header-anchor" href="#why-is-the-plugin-not-available" aria-label="Permalink to “Why is the plugin not available?”">​</a></h3><ul><li>Please wait for the project to be indexed, then reopen the project</li></ul><h3 id="what-time-will-the-plugin-generate-draft-props-etc" tabindex="-1">What time will the plugin generate draft, props, etc.? <a class="header-anchor" href="#what-time-will-the-plugin-generate-draft-props-etc" aria-label="Permalink to “What time will the plugin generate draft, props, etc.?”">​</a></h3><ul><li>When you change the Java or Kotlin source, then wait 2 seconds</li></ul><h3 id="what-time-will-the-plugin-generate-the-dto-view-input-etc" tabindex="-1">What time will the plugin generate the DTO view, input, etc.? <a class="header-anchor" href="#what-time-will-the-plugin-generate-the-dto-view-input-etc" aria-label="Permalink to “What time will the plugin generate the DTO view, input, etc.?”">​</a></h3><ul><li>When you change the DTO source, then wait 2 seconds</li></ul><h3 id="why-does-the-plugin-not-generate-source-for-immutable-and-dto" tabindex="-1">Why does the plugin not generate source for Immutable and DTO <a class="header-anchor" href="#why-does-the-plugin-not-generate-source-for-immutable-and-dto" aria-label="Permalink to “Why does the plugin not generate source for Immutable and DTO”">​</a></h3><ul><li>Please check the plugin log tool window on the bottom or the left bottom, then create an issue</li></ul><h3 id="why-generated-source-is-not-same-as-the-jimmer-s-apt-ksp" tabindex="-1">Why generated source is not same as the Jimmer&#39;s apt/ksp <a class="header-anchor" href="#why-generated-source-is-not-same-as-the-jimmer-s-apt-ksp" aria-label="Permalink to “Why generated source is not same as the Jimmer&#39;s apt/ksp”">​</a></h3><p>Do not worry, the Jimmer&#39;s apt/ksp will generate full source when your project builds.</p>',21)]))}const m=a(n,[["render",r]]);export{p as __pageData,m as default};
