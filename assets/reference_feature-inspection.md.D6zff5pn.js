import{_ as a,c as o,o as t,af as i}from"./chunks/framework.CPLsEXPO.js";const m=JSON.parse('{"title":"Inspection","description":"","frontmatter":{},"headers":[],"relativePath":"reference/feature-inspection.md","filePath":"en/reference/feature-inspection.md"}'),r={name:"reference/feature-inspection.md"};function n(c,e,d,l,p,s){return t(),o("div",null,e[0]||(e[0]=[i('<h1 id="inspection" tabindex="-1">Inspection <a class="header-anchor" href="#inspection" aria-label="Permalink to “Inspection”">​</a></h1><p>JimmerBuddy provide some inspection features to help you find problems in your code.</p><h2 id="association" tabindex="-1">Association <a class="header-anchor" href="#association" aria-label="Permalink to “Association”">​</a></h2><p>Check some annotations of the association.</p><ul><li><code>@OneToOne</code> and <code>@ManyToOne</code> can not at collection property.</li><li><code>@OneToMany</code> and <code>@ManyToMany</code> can not at non-collection property.</li></ul><h2 id="mappedby" tabindex="-1">MappedBy <a class="header-anchor" href="#mappedby" aria-label="Permalink to “MappedBy”">​</a></h2><p>Check the <code>mappedBy</code> property of the association.</p><ul><li><code>mappedBy</code> prop must exist.</li><li><code>mappedBy</code> prop type must match the inverse property type.</li></ul><h2 id="idview" tabindex="-1">IdView <a class="header-anchor" href="#idview" aria-label="Permalink to “IdView”">​</a></h2><p>Check the <code>@IdView</code> annotation.</p><ul><li><code>value</code> must exist if the property is a collection.</li><li>Property type must be a collection if the type is a generic type.</li><li>Base prop must exist.</li></ul><h2 id="formula" tabindex="-1">Formula <a class="header-anchor" href="#formula" aria-label="Permalink to “Formula”">​</a></h2><p>Check the <code>@Formula</code> annotation.</p><ul><li><code>dependencies</code> must exist.</li></ul><h2 id="fetchby" tabindex="-1">FetchBy <a class="header-anchor" href="#fetchby" aria-label="Permalink to “FetchBy”">​</a></h2><p>Check the <code>@FetchBy</code> annotation.</p><ul><li>Property must be a fetcher.</li><li>Property must exist.</li><li>Fetcher type must match the fetch type.</li></ul><h2 id="immutable" tabindex="-1">Immutable <a class="header-anchor" href="#immutable" aria-label="Permalink to “Immutable”">​</a></h2><p>Check some annotations about Immutable such as <code>@Immutable</code>, <code>@Entity</code>, <code>@MappedSuperclass</code>, and <code>@Embeddable</code>.</p><ul><li>Must on the interface.</li></ul><h2 id="orderedprop" tabindex="-1">OrderedProp <a class="header-anchor" href="#orderedprop" aria-label="Permalink to “OrderedProp”">​</a></h2><p>Check the <code>@OrderedProp</code> annotation.</p><ul><li><code>value</code> must exist.</li></ul>',23)]))}const u=a(r,[["render",n]]);export{m as __pageData,u as default};
